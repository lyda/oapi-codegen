// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package api

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// NewPet defines model for NewPet.
type NewPet struct {
	// Name Name of the pet
	Name NewPet_Name `json:"name"`

	// Tag Type of the pet
	Tag *string `json:"tag,omitempty"`
}

// NewPetName0 defines model for .
type NewPetName0 = string

// NewPetName1 defines model for .
type NewPetName1 = int

// NewPet_Name Name of the pet
type NewPet_Name struct {
	union json.RawMessage
}

// Pet defines model for Pet.
type Pet struct {
	// Id Unique id of the pet
	Id int64 `json:"id"`

	// Name Name of the pet
	Name Pet_Name `json:"name"`

	// Tag Type of the pet
	Tag *string `json:"tag,omitempty"`
}

// PetName0 defines model for .
type PetName0 = string

// PetName1 defines model for .
type PetName1 = int

// Pet_Name Name of the pet
type Pet_Name struct {
	union json.RawMessage
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {
	// Tags tags to filter by
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody = NewPet

// AsNewPetName0 returns the union data inside the NewPet_Name as a NewPetName0
func (t NewPet_Name) AsNewPetName0() (NewPetName0, error) {
	var body NewPetName0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewPetName0 overwrites any union data inside the NewPet_Name as the provided NewPetName0
func (t *NewPet_Name) FromNewPetName0(v NewPetName0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewPetName0 performs a merge with any union data inside the NewPet_Name, using the provided NewPetName0
func (t *NewPet_Name) MergeNewPetName0(v NewPetName0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewPetName1 returns the union data inside the NewPet_Name as a NewPetName1
func (t NewPet_Name) AsNewPetName1() (NewPetName1, error) {
	var body NewPetName1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewPetName1 overwrites any union data inside the NewPet_Name as the provided NewPetName1
func (t *NewPet_Name) FromNewPetName1(v NewPetName1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewPetName1 performs a merge with any union data inside the NewPet_Name, using the provided NewPetName1
func (t *NewPet_Name) MergeNewPetName1(v NewPetName1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t NewPet_Name) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NewPet_Name) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPetName0 returns the union data inside the Pet_Name as a PetName0
func (t Pet_Name) AsPetName0() (PetName0, error) {
	var body PetName0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPetName0 overwrites any union data inside the Pet_Name as the provided PetName0
func (t *Pet_Name) FromPetName0(v PetName0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePetName0 performs a merge with any union data inside the Pet_Name, using the provided PetName0
func (t *Pet_Name) MergePetName0(v PetName0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPetName1 returns the union data inside the Pet_Name as a PetName1
func (t Pet_Name) AsPetName1() (PetName1, error) {
	var body PetName1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPetName1 overwrites any union data inside the Pet_Name as the provided PetName1
func (t *Pet_Name) FromPetName1(v PetName1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePetName1 performs a merge with any union data inside the Pet_Name, using the provided PetName1
func (t *Pet_Name) MergePetName1(v PetName1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Pet_Name) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Pet_Name) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
